<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Article;
use AppBundle\Form\ArticleType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\View\ViewHandler;
use FOS\RestBundle\View\View;
use Symfony\Component\HttpFoundation\File\Exception\FileException;


/**
 * Article controller.
 *
 */
class ArticleController extends Controller
{
  /**
   * @Rest\View()
   * @Rest\Get("/articles")
   */
  public function getArticlesAction(Request $request)
  {
      $articles = $this->get('doctrine')
              ->getRepository('AppBundle:Article')
              ->findAll();

      return $articles;
  }

  /**
   * @Rest\View()
   * @Rest\Get("/articles/{id}")
  */
  public function getArticleAction(Request $request)
  {
      $article = $this->get('doctrine')
              ->getRepository('AppBundle:Article')
              ->findOneById($request->get('id'));
      /* @var $article Article */

      if (empty($article)) {
          return new JsonResponse(['message' => 'Article not found'], Response::HTTP_NOT_FOUND);
      }

      return $article;
  }

  /**
    * @Rest\View(statusCode=Response::HTTP_CREATED)
    * @Rest\Post("/articles")
    */
  public function postArticlesAction(Request $request)
  {
      $article = new Article();
      $form = $this->createForm(ArticleType::class, $article);

      $form->submit($request->request->all()); // Validation des donnÃ©es

      if ($form->isValid()) {
        $data = explode(',',$request->request->get('imagebase64'))[1];
        $fileName = $this->generateUniqueFileName().'.'.explode('/',getimagesizefromstring(base64_decode($data))['mime'])[1];
        $imagepath = $this->get('kernel')->getProjectDir() . '/web/images/headers/'.$fileName;
        $imgfile = fopen($imagepath , 'wb' );
        fwrite($imgfile, base64_decode($data));
        fclose( $imgfile );


        $em = $this->getDoctrine()->getManager();
        $article->setImage($fileName);
        $article->setPublishedAt(new \DateTime("now"))->setUser($this->getUser());
        $em->persist($article);
        $em->flush();
        return $article;
      } else {
        return $form;
      }
  }

      /**
       * @Rest\View(statusCode=Response::HTTP_NO_CONTENT)
       * @Rest\Delete("/articles/{id}")
       */
      public function removePlaceAction(Request $request)
      {
          $em = $this->getDoctrine()->getManager();
          $article = $em->getRepository('AppBundle:Article')
                      ->find($request->get('id'));
          /* @var $article Article */

          if($article){
            $em->remove($article);
            $em->flush();
          }
      }


      /**
       * @Rest\View()
       * @Rest\Put("/articles/{id}")
       */
     public function updatePlaceAction(Request $request)
     {
         return $this->updatePlace($request, true);
     }

     /**
      * @Rest\View()
      * @Rest\Patch("/articles/{id}")
      */
     public function patchPlaceAction(Request $request)
     {
         return $this->updatePlace($request, false);
     }

    public function updatePlace(Request $request, $clearMissing)
    {
      $em = $this->getDoctrine()->getManager();
      $article = $em->getRepository('AppBundle:Article')
                  ->find($request->get('id'));
        /* @var $article Article */

        if (empty($article)) {
            return new JsonResponse(['message' => 'Article not found'], Response::HTTP_NOT_FOUND);
        }

        $form = $this->createForm(ArticleType::class, $article);

        $form->submit($request->request->all(), $clearMissing);

        if ($form->isValid()) {
            $data = explode(',',$request->request->get('imagebase64'))[1];
            $fileName = $this->generateUniqueFileName().'.'.explode('/',getimagesizefromstring(base64_decode($data))['mime'])[1];
            $imagepath = $this->get('kernel')->getProjectDir() . '/web/images/headers/'.$fileName;
            $imgfile = fopen($imagepath , 'wb' );
            fwrite($imgfile, base64_decode($data));
            fclose( $imgfile );
            unlink($article->getImage());
            $article->setImage($fileName);

            $em->merge($article);
            $em->flush();
            return $article;
        } else {
            return $form;
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
